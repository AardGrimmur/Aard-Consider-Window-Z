<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, August 14, 2009, 6:13 AM -->
<!-- MuClient version 4.93 -->

<!-- Plugin "Consider_Window" generated by Plugin Wizard -->
<!-- Updates Made by Strazor on September 6, 2014
     1) Updated sPat variable to correctly escape in LUA and capture "-" and "." in mob names
     2) Updated some of the triggers to regular expressions
     3) Triggers should now capture Auras of Mobs in Minwin.  This is not perfect but works.
     4) Put a SPACE in match="\[ Exits\:.+$" to make the consider update work when moving
     5) Tested on Aardwolf Mudclient R1802 | Mushclient version 4.93 - http://www.aardwolf.com/play/downloadmc.htm -->
<!-- More updates by Kobus November 2017
	* Converted all consider triggers to regex including all possible flags, short or long
	* Replaced a gsub in adapt_consider with wildcard from the regex
	* Added gsub loop in adapt_consider for mobs with ?, ! or " in their names (nod Khannon)
	* Triggers now set color and level range variables for the miniwindow
	* Removed for loop in adapt_consider, no longer needed with color, range variables set by the triggers
	* Removed the consider_messages table as it is no longer needed with color, range set by the triggers
	* Added 2 triggers suggested on the forum for noexp and mob entry on repop
	* Removed call to adapt_consider when "You see no one here but yourself!"
	* Added 4 triggers for unkillable mobs (for omit only)
	* Added a trigger for mobs already being challenged (omit only)
	* Added a trigger for safe rooms (omit only)
	* Added suggestion on install for the help command 'conw ?'
-->
<!-- Made a few modifications July 2021 - Grimmur
    * Changed level ranges and color scheme to match S&D con output
    * Added a few commands to allow flipping window from front to back
-->
<muclient>
<plugin
   name="Aardwolf_Consider_Window_Z"
   author="Blainer"
   id="584807a32cf46af04a1bece3"
   language="Lua"
   purpose="Display clickable consider command output."
   save_state="y"
   date_written="2009-08-14 06:12:14"
   requires="4.43"
   version="2.0"
   >
<description trim="y">
<![CDATA[
Put consider info in a miniwindow with commands.
Mostly copied from: http://www.gammon.com.au/forum/bbshowpost.php?id=8847
And: http://www.gammon.com.au/forum/?id=9664
]]>
</description>
</plugin>

<!--  Get our standard constants -->

<include name="constants.lua"/>
<!--  Triggers  -->

<triggers>
  <trigger
   enabled="n"
   regexp="y"
   group="consider"
   match="^(\([A-Za-z ]+\) ?)*(.+) looks a little worried about the idea\.$"
   keep_evaluating="y"
   omit_from_output="y"
   script="adapt_consider"
   sequence="100"
   send_to="12"
  >
  <send>mob_color = "lightgreen"
mob_range = "-2 to -4"</send>
  </trigger>
  <trigger
   enabled="n"
   regexp="y"
   group="consider"
   match="^(\([A-Za-z ]+\) ?)*(.+) says 'BEGONE FROM MY SIGHT unworthy!'$"
   keep_evaluating="y"
   omit_from_output="y"
   script="adapt_consider"
   sequence="100"
   send_to="12"
  >
  <send>mob_color = "orangered"
mob_range = "+41 to +50"</send>
  </trigger>
  <trigger
   enabled="n"
   regexp="y"
   group="consider"
   match="^(\([A-Za-z ]+\) ?)*(.+) should be a fair fight!$"
   keep_evaluating="y"
   omit_from_output="y"
   script="adapt_consider"
   sequence="100"
   send_to="12"
  >
  <send>mob_color = "seagreen"
mob_range = "-1 to +1"</send>
  </trigger>
  <trigger
   enabled="n"
   regexp="y"
   group="consider"
   match="^(\([A-Za-z ]+\) ?)*(.+) snickers nervously\.$"
   keep_evaluating="y"
   omit_from_output="y"
   script="adapt_consider"
   sequence="100"
   send_to="12"
  >
  <send>mob_color = "lawngreen"
mob_range = "+2 to +4"</send>
  </trigger>
  <trigger
   enabled="n"
   group="consider"
   regexp="y"
   match="^(\([A-Za-z ]+\) ?)*(.+) would be easy, but is it even worth the work out\?$"
   keep_evaluating="y"
   omit_from_output="y"
   script="adapt_consider"
   sequence="100"
   send_to="12"
  >
  <send>mob_color = "deepskyblue"
mob_range = "-10 to -19"</send>
  </trigger>
  <trigger
   enabled="n"
   regexp="y"
   group="consider"
   match="^(\([A-Za-z ]+\) ?)*(.+) would crush you like a bug!$"
   keep_evaluating="y"
   omit_from_output="y"
   script="adapt_consider"
   sequence="100"
   send_to="12"
  >
  <send>mob_color = "gold"
mob_range = "+21 to +32"</send>
  </trigger>
  <trigger
   enabled="n"
   group="consider"
   match="^(\([A-Za-z ]+\) ?)*(.+) would dance on your grave!$"
   keep_evaluating="y"
   omit_from_output="y"
   regexp="y"
   script="adapt_consider"
   sequence="100"
   send_to="12"
  >
  <send>mob_color = "darkorange"
mob_range = "+31 to +40"</send>
  </trigger>
  <trigger
   enabled="n"
   group="consider"
   match="^(\([A-Za-z ]+\) ?)*Best run away from (.+) while you can!$"
   keep_evaluating="y"
   omit_from_output="y"
   regexp="y"
   script="adapt_consider"
   sequence="100"
   send_to="12"
  >
  <send>mob_color = "yellowgreen"
mob_range = "+10 to +15"</send>
  </trigger>
  <trigger
   enabled="n"
   regexp="y"
   group="consider"
   match="^(\([A-Za-z ]+\) ?)*Challenging (.+) would be either very brave or very stupid\.$"
   keep_evaluating="y"
   omit_from_output="y"
   script="adapt_consider"
   sequence="100"
   send_to="12"
  >
  <send>mob_color = "yellow"
mob_range = "+16 to +20"</send>
  </trigger>
  <trigger
   enabled="n"
   regexp="y"
   group="consider"
   match="^(\([A-Za-z ]+\) ?)*No Problem! (.+) is weak compared to you\.$"
   keep_evaluating="y"
   omit_from_output="y"
   script="adapt_consider"
   sequence="100"
   send_to="12"
  >
  <send>mob_color = "mediumturquoise"
mob_range = "-5 to -9"</send>
  </trigger>
  <trigger
   enabled="n"
   group="consider"
   match="^(\([A-Za-z ]+\) ?)*You would be completely annihilated by (.+)!$"
   keep_evaluating="y"
   omit_from_output="y"
   regexp="y"
   script="adapt_consider"
   sequence="100"
   send_to="12"
  >
  <send>mob_color = "red"
mob_range = "+51 and above"</send>
  </trigger>
  <trigger
   enabled="n"
   group="consider"
   match="^(\([A-Za-z ]+\) ?)*You would stomp (.+) into the ground\.$"
   keep_evaluating="y"
   omit_from_output="y"
   regexp="y"
   script="adapt_consider"
   sequence="100"
   send_to="12"
  >
  <send>mob_color = "gray"
mob_range = "-20 and below"</send>
  </trigger>
  <trigger
   enabled="n"
   group="consider"
   match="^(\([A-Za-z ]+\) ?)*(.+) chuckles at the thought of you fighting"
   keep_evaluating="y"
   omit_from_output="y"
   regexp="y"
   script="adapt_consider"
   sequence="100"
   send_to="12"
  >
  <send>mob_color = "seagreen"
mob_range = "+5 to +9"</send>
  </trigger>
  <trigger
   enabled="n"
   group="consider"
   match="^You see no one here but yourself!$"
   keep_evaluating="y"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   group="consider"
   match="^.+ would smite you for killing .+!$"
   keep_evaluating="y"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   group="consider"
   match="^.+ would not approve of you killing .+!$"
   keep_evaluating="y"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   group="consider"
   match="^.+ has divine protection\.$"
   keep_evaluating="y"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   group="consider"
   match="^.+ has already been challenged\.$"
   keep_evaluating="y"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   group="consider"
   match="^If you killed .+, who would serve"
   keep_evaluating="y"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   group="consider"
   match="^Strange forces prevent violence here\.$"
   keep_evaluating="y"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   group="consider"
   match="^nhm$"
   omit_from_output="y"
   keep_evaluating="n"
   regexp="y"
   script="Show_Window"
   send_to="12"
   sequence="1"
  >
  </trigger>
  <trigger
   enabled="n"
   group="auto_consider"
   match="^You have set your character to receive no experience points!$"
   omit_from_output="n"
   keep_evaluating="y"
   regexp="y"
   script="send_consider"
   send_to="12"
   sequence="1"
  >
  </trigger>
  <trigger
   enabled="n"
   group="auto_consider"
   match="^.+ appears in the room\.$"
   omit_from_output="n"
   keep_evaluating="y"
   regexp="y"
   script="send_consider"
   send_to="12"
   sequence="1"
  >
  </trigger>
    <trigger
   enabled="n"
   group="auto_consider"
   match="^You receive .+ experience points\.$"
   omit_from_output="n"
   keep_evaluating="y"
   regexp="y"
   script="send_consider"
   send_to="12"
   sequence="1"
  >
  </trigger>
   <trigger
   enabled="n"
   group="auto_consider"
   match="^\[ Exits"
   omit_from_output="n"
   keep_evaluating="y"
   regexp="y"
   script="send_consider"
   send_to="12"
   sequence="1"
  >
  </trigger>
   <trigger
   enabled="n"
   group="auto_consider"
   match="^.+ has fled!$"
   omit_from_output="n"
   keep_evaluating="y"
   regexp="y"
   script="send_consider"
   send_to="12"
   sequence="1"
  >
  </trigger>

</triggers>
<!-- Aliases -->
<aliases>
  <alias
   script="conw"
   match="^conw\s(.*)$"
   keep_evaluating="y"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  </alias>
  <alias
   script="conwb"
   match="^conwb$"
   keep_evaluating="y"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  </alias>
  <alias
   script="conwf"
   match="^conwf$"
   keep_evaluating="y"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  </alias>
  <alias
   script="conwfa"
   match="^conwfa$"
   keep_evaluating="y"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  </alias>
  <alias
   script="send_consider"
   match="^conw$"
   keep_evaluating="y"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="99"
  >
  </alias>
  <alias
   script="command_line"
   match="^(\d+)\s?(\w*)$"
   enabled="y"
   regexp="y"
   send_to="12"
   keep_evaluating="y"
   sequence="1"
  >
  </alias>
</aliases>
<!--  Script  -->
<script>
<![CDATA[
-- Options -----------------------------------------------
local BACKGROUND_COLOUR     = ColourNameToRGB "black"
local BORDER_COLOUR         = ColourNameToRGB "dimgray"
local DEFAULT_TEXT_COLOUR   = ColourNameToRGB "white"
local TEXT_OFFSET           = "4"
local BORDER_WIDTH          = "1"
local LINE_SPACING          = "1"
local FONT_NAME             = "Dina"
local FONT_SIZE             = 8

local SHOW_WELCOME          = true
local TITLE                 = "consider all"
local ECHO_CONSIDER         = false -- show consider in command window
local SHOW_NO_MOB           = false -- show warning when considering an empty room

require "movewindow"
mob_color = "gray" -- Color set by the triggers - Kobus
mob_range = "0 to 0" -- Range set by the triggers - Kobus

-- Consider messages table removed, no longe needed - Kobus



replaceT =  { -- words to remove from Mobile's names to get the keyword
            ["a"] = "",
            ["A"] = "",
            ["an"] = "",
            ["An"] = "",
            ["the"] = "",
            ["The"] = "",
            ["of"] = "",
            ["Of"] = "",
            ["captured"] = "",
            ["damned"] = "",
            ["yummy"] = "",
            ["looking"] = "",
            ["wanders"] = "",
            ["beef"] = "",
            ["pot"] = "",
            ["scrumptious"] = "",
            ["tortured"] = "",
            ["Hell"] = "",
            ["largest"] = "",
            ["older"] = "",
            ["slithering"] = "",
            ["tiny"] = "",
            ["huge"] = ""
            }

targT = {}

function keyword_change (name, line, wildcards)

    if keyword_position == "end" then
        SetVariable ("keyword_position", "beginning")
    else
        SetVariable ("keyword_position", "end")
    end
    keyword_position = GetVariable ("keyword_position")

    ColourTell ("white", "blue", "Keywords will now be taken from the " .. keyword_position .. " of Mobile names. ")
    ColourNote ("", "black", " ")

end -- keyword_position

function conw (name, line, wildcards)

    --show help <conw ?>
    if wildcards[1] == "?" then
            a = {
                "conw - update window with consider all command.",
                "conwb - move window to back and disable auto (to cut lag).",
                "conwf - move window to front without enabling auto.",
                "conwfa - move window to front and enable autocon.",
                "<num> <word> - Execute <word> with keyword from line <num> on consider window.",
                "<num> - Execute with default word.",
                "conw <word> - set default command.",
                "conw chng - swop keyword from beginning of name to end of name or vice-versa.",
                "conw auto - toggle auto update consider window on room entry and after combat.",
                "conw ? - show this help."
                }
        for i,v in ipairs (a) do
            sSpa = string.rep (" ", 20 - v:sub(1,v:find("-") - 1):len() )
            ColourTell ("yellow", GetInfo(271), v:sub(1,v:find("-") - 1) .. sSpa )
            ColourNote ("white", GetInfo(271), v:sub(v:find("-"), v:len() ))
        end
        return
    end

    if wildcards[1] == "auto" then
        if tonumber (GetVariable ("auto_conw")) == 1 then
            SetVariable ("auto_conw", 0)
            EnableTriggerGroup ("auto_consider", 0)
            ColourTell ("white", "blue", "Auto consider off.")
            ColourNote ("", "black", " ")
        else
            SetVariable ("auto_conw", 1)
            EnableTriggerGroup ("auto_consider", 1)
            ColourTell ("white", "blue", "Auto consider on.")
            ColourNote ("", "black", " ")
        end
        return
    end

    if wildcards[1] == "chng" then
        keyword_change ()
        return
    end

    if wildcards[1] and wildcards[1]:match ("^%w+$") then
        SetVariable ("default_command", wildcards[1])
        default_command = GetVariable ("default_command")
        ColourTell ("white", "blue", "Default command: " .. wildcards[1])
        ColourNote ("", "black", " ")
    end


end -- conw

function conwb (name, line, wildcards)

    CallPlugin("462b665ecb569efbf261422f","dropMe", win)
    SetVariable ("auto_conw", 0)
    EnableTriggerGroup ("auto_consider", 0)

end -- conwb

function conwf (name, line, wildcards)

    CallPlugin("462b665ecb569efbf261422f","boostMe", win)
    SetVariable ("auto_conw", 0)
    EnableTriggerGroup ("auto_consider", 0)

end -- conwf

function conwfa (name, line, wildcards)

    CallPlugin("462b665ecb569efbf261422f","boostMe", win)
    SetVariable ("auto_conw", 1)
    EnableTriggerGroup ("auto_consider", 1)

end -- conwfa

function send_consider ()

    if GetVariable ("doing_consider") == "true" then
        return
    else
        SetVariable ("doing_consider", "true")
        EnableTriggerGroup ("consider", true)
        SendNoEcho ("consider all")
        SendNoEcho ("echo nhm")
        targT = {}
    end

end -- send_consider

function execute_command (id, s)

    if not s then
        return
    end

    s = s:match ("^([%w']+)%:%d+$")
    Execute (default_command .. " " .. s)
    ColourTell ("white", "blue", default_command .. " " .. s)
    ColourNote ("", "black", " ")

end -- execute_command

function command_line (name, line, wildcards)

    iNum = tonumber (wildcards[1])
    if iNum > #targT then
        return
    end

    if wildcards[2] == "" then
        sKey = default_command
    else
        sKey = tostring (wildcards[2])
    end

    if targT[iNum] then
        Execute (sKey .. " " .. targT[iNum].keyword)
        ColourTell ("white", "blue", sKey .. " " .. targT[iNum].keyword .. " ")
        ColourNote ("", "black", " ")
    else
        ColourTell ("white", "blue", "no target in targT ")
        ColourNote ("", "black", " ")
    end

end -- command_line

function adapt_consider (name, line, wildcards)
    mob = nil
	mob = wildcards[2] -- New version because of regex triggers - Kobus
	while string.match(mob,[=[[?!",]]=]) do -- Pull out ? and ! - Kobus
		mob = string.gsub(mob,"%?","")
		mob = string.gsub(mob,"!","")
		mob = string.gsub(mob,[=["]=],"")
		mob = string.gsub(mob,[=[,]=],"")
	end -- Stripping ? ! " and , from mob names -- Kobus
    if keyword_position == "end" then
        sPat = "[%w\\-\\.]+$"
    else
        sPat = "^[%w\\-\\.]+"
    end
	-- Removed for loop here, no longer necessary with color, range set by triggers - Kobus
    if mob then
        t = {
            keyword = mob:gsub ("%w+", function (str) return replaceT [str] end ):gsub("^%s+", ""):gsub("%s+$", ""):match(sPat),
            name    = mob,
            line    = line,
            colour  = mob_color,
            range   = "(" .. mob_range .. ")",
            message = line
            } -- Changed to use color, range set by triggers - Kobus
        if ECHO_CONSIDER then
            ColourNote (mob_color, "", line .. " (" .. mob_range .. ")" )
			-- Changed to use color, range set by triggers - Kobus
        end
        table.insert (targT, t)
    end -- if


    if not mob and SHOW_NO_MOB then
        ColourTell ("white", "blue", "Could not find anything: " .. line)
        ColourNote ("", "black", " ")
    end -- not  found in table

end -- adapt_consider

function Draw_Title ()

    --draw the title and add drag hotspot
    top     = BORDER_WIDTH + LINE_SPACING
    bottom  = top + font_height
    left    = BORDER_WIDTH + TEXT_OFFSET
    right   = WindowInfo (win, 3)
    movewindow.add_drag_handler (win, 0, top, right, bottom, 1)
    WindowText (win, font_id, TITLE .. " (" .. default_command .. ")", left, top, right, bottom, BORDER_COLOUR)

    -- draw drag bar rectangle
    WindowRectOp (win, 1, 0, 0, WindowInfo (win, 3) , WindowInfo (win, 4), BORDER_COLOUR)

    banner_height = bottom + LINE_SPACING + BORDER_WIDTH

end -- Draw_Title

function Show_Window ()

    -- get width and height and draw the window
    if #targT > 0 then
        for i,v in ipairs (targT) do
            window_width = math.max (WindowTextWidth (win, font_id, tostring (i) .. ". " .. v.name .. " " .. v.range) + TEXT_OFFSET * 2 + BORDER_WIDTH * 2, banner_width, window_width)
        end
    else
        window_width = banner_width
    end
    window_height = banner_height * 1.2 + #targT * (font_height + LINE_SPACING)

    WindowCreate (win,
         windowinfo.window_left,
         windowinfo.window_top,
         window_width,     -- width
         window_height,  -- height
         windowinfo.window_mode,
         windowinfo.window_flags,
         BACKGROUND_COLOUR)

    -- draw each line
    top     = banner_height + LINE_SPACING
    left    = TEXT_OFFSET + BORDER_WIDTH
    bottom  = top + font_height

    for i,v in ipairs (targT) do
        sLine = tostring (i) .. ". " .. v.name .. " " .. v.range
        right   = WindowTextWidth (win, font_id, sLine) + left
        WindowText (win, font_id, sLine, left, top, right, bottom, ColourNameToRGB (v.colour))
        v.keyword = v.keyword or ""
        sBalloon = v.line .. " " .. v.range .. "\n\n" .. "Click to Execute: '" .. default_command .. " " ..  v.keyword .. "'"
        WindowAddHotspot (win, v.keyword .. ":" .. tostring (i), left, top, right, bottom,
            "", -- MouseOver
            "", -- CancelMouseOver
            "", -- MouseDown
            "", -- CancelMouseDown
            "execute_command", -- MouseUp
            sBalloon,
            1, -- Cursor
            0) --  Flag
        top     = bottom + LINE_SPACING
        bottom  = top + font_height
    end

    --draw the title
    Draw_Title()

    WindowShow (win, true)
    SetVariable ("doing_consider", "false")
    EnableTriggerGroup ("consider", false)

end -- Show_Window

function Show_Banner ()

    window_width = title_width + BORDER_WIDTH * 2 + TEXT_OFFSET * 2
    window_height = font_height + LINE_SPACING * 2 + descent

    WindowCreate (win,
         windowinfo.window_left,
         windowinfo.window_top,
         window_width,     -- width
         window_height,  -- height
         windowinfo.window_mode,
         windowinfo.window_flags,
         BACKGROUND_COLOUR)

    Draw_Title ()

    WindowShow (win, true)

end -- ShowBanner

function OnPluginInstall ()

    if SHOW_WELCOME then
        Note("Consider_Window_Z.xml installed")
		-- Suggest help command - Kobus
		Note("For a list of commands type 'conw ?'")
    end

    win = "con_window_" .. GetPluginID()

    local fonts = utils.getfontfamilies ()
    if fonts[FONT_NAME] then
        font_size = FONT_SIZE
        font_name = FONT_NAME
    elseif fonts.Dina then
        font_size = 8
        font_name = "Dina"    -- the actual font
    else
        font_size = 10
        font_name = "Courier"
    end -- if

    font_id = "consider_font"

    windowinfo = movewindow.install (win, 6, miniwin.create_absolute_location)

    check (WindowCreate (win,
        windowinfo.window_left,
        windowinfo.window_top,
        1, 1,
        windowinfo.window_mode,
        windowinfo.window_flags,
        BACKGROUND_COLOUR) )

    WindowFont (win, font_id, font_name, font_size, false, false, false, false, 0, 0)  -- normal
    font_height = WindowFontInfo (win, font_id, 1)  -- height
    ascent = WindowFontInfo (win, font_id, 2)
    descent = WindowFontInfo (win, font_id, 3)

    default_command = GetVariable ("default_command") or "kill"
    keyword_position = GetVariable ("keyword_position") or "end"

    SetVariable ("doing_consider", "false")

    auto_conw = GetVariable ("auto_conw") or 1

    EnableTriggerGroup ("auto_consider", auto_conw)

   
    CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", win)
		

    if GetVariable ("enabled") == "false" then
        ColourNote ("yellow", "", "Warning: Plugin " .. GetPluginName ().. " is currently disabled.")
        check (EnablePlugin(GetPluginID (), false))
        return
    end -- they didn't enable us last time

    OnPluginEnable ()

end -- OnPluginInstall

function OnPluginEnable ()

    title_width = WindowTextWidth (win, font_id, TITLE .. " (" .. default_command .. ")")
    banner_width = title_width + BORDER_WIDTH * 2 + TEXT_OFFSET * 2
    Show_Banner ()

end -- OnPluginEnable

function OnPluginDisable ()

  WindowShow (win, false)

end -- OnPluginDisable

function OnPluginSaveState ()

  SetVariable ("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))
  SetVariable ("doing_consider", "false")
  movewindow.save_state (win)

end -- OnPluginSaveState

]]>
</script>
</muclient>
